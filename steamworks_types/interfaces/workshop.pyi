from ctypes import *
from steamworks.enums import *
from steamworks.structs import *
from steamworks.exceptions import *
from enum import Enum as Enum
from typing import Any

class SteamWorkshop:
    steam: Any
    def __init__(self, steam: object) -> None: ...
    def SetItemCreatedCallback(self, callback: object) -> bool: ...
    def SetItemUpdatedCallback(self, callback: object) -> bool: ...
    def SetItemInstalledCallback(self, callback: object) -> bool: ...
    def ClearItemInstalledCallback(self) -> None: ...
    def SetItemSubscribedCallback(self, callback: object) -> bool: ...
    def SetItemUnsubscribedCallback(self, callback: object) -> bool: ...
    def CreateItem(
        self,
        app_id: int,
        filetype: EWorkshopFileType,
        callback: object = ...,
        override_callback: bool = ...,
    ) -> None: ...
    def SubscribeItem(
        self,
        published_file_id: int,
        callback: object = ...,
        override_callback: bool = ...,
    ) -> None: ...
    def UnsubscribeItem(
        self,
        published_file_id: int,
        callback: object = ...,
        override_callback: bool = ...,
    ) -> None: ...
    def StartItemUpdate(self, app_id: int, published_file_id: int) -> int: ...
    def SetItemTitle(self, update_handle: int, title: str) -> bool: ...
    def SetItemDescription(self, update_handle: int, description: str) -> bool: ...
    def SetItemTags(self, update_handle: int, tags: list[str]) -> bool: ...
    def SetItemVisibility(
        self, update_handle: int, vis: ERemoteStoragePublishedFileVisibility
    ) -> bool: ...
    def SetItemContent(self, update_handle: int, content_directory: str) -> bool: ...
    def SetItemPreview(self, update_handle: int, preview_image: str) -> bool: ...
    def SubmitItemUpdate(
        self,
        update_handle: int,
        change_note: str,
        callback: object = ...,
        override_callback: bool = ...,
    ) -> None: ...
    def GetItemUpdateProgress(self, update_handle: int) -> dict[str, Any]: ...
    def GetNumSubscribedItems(self) -> int: ...
    def SuspendDownloads(self, paused: bool = ...) -> None: ...
    def GetSubscribedItems(self, max_items: int = ...) -> list[Any]: ...
    def GetItemState(self, published_file_id: int) -> EItemState: ...
    def GetItemInstallInfo(
        self, published_file_id: int, max_path_length: int = ...
    ) -> dict[str, Any]: ...
    def GetItemDownloadInfo(self, published_file_id: int) -> dict[str, Any]: ...
